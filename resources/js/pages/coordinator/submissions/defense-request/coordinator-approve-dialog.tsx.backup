import { useState, useRef, useEffect } from 'react';
import { toast } from 'sonner';
import SignatureCanvas from 'react-signature-canvas';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import {
  FileText,
  Signature as SignatureIcon,
  Upload,
  Loader2,
  Check,
  Trash2,
  X
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface CoordinatorApproveDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  defenseRequest: any;
  coordinatorId?: number;
  coordinatorName?: string;
  onApproveComplete?: () => void;
}

type ApprovalTab = 'preview' | 'signature';

export default function CoordinatorApproveDialog({
  open,
  onOpenChange,
  defenseRequest,
  coordinatorId,
  coordinatorName = 'Coordinator',
  onApproveComplete
}: CoordinatorApproveDialogProps) {
  const [currentTab, setCurrentTab] = useState<ApprovalTab>('preview');
  const [endorsementPdfUrl, setEndorsementPdfUrl] = useState<string | null>(null);
  const [isLoadingPdf, setIsLoadingPdf] = useState(false);
  const [isApproving, setIsApproving] = useState(false);
  
  // Signature states
  const [signatures, setSignatures] = useState<any[]>([]);
  const [activeSignature, setActiveSignature] = useState<any | null>(null);
  const [loadingSignatures, setLoadingSignatures] = useState(false);
  const [showDrawSignature, setShowDrawSignature] = useState(false);
  const [isSavingSignature, setIsSavingSignature] = useState(false);
  const sigPad = useRef<SignatureCanvas>(null);

  function csrf() {
    return (document.querySelector('meta[name="csrf-token"]') as HTMLMetaElement)?.content || '';
  }

  // Load templates and auto-generate document
  useEffect(() => {
    if (open) {
      loadTemplates();
      loadSignatures();
    } else {
      // Reset state when dialog closes
      if (generatedPdfUrl && generatedPdfUrl.startsWith('blob:')) {
        URL.revokeObjectURL(generatedPdfUrl);
      }
      setGeneratedPdfUrl(null);
      setGeneratedDocId(null);
      setCurrentTab('preview');
      setUploadedFile(null);
      setIsDragging(false);
    }
  }, [open]);

  // Auto-generate document when templates are loaded
  useEffect(() => {
    if (open && templates.length > 0 && selectedTemplate && !generatedPdfUrl && !isGenerating) {
      handleGenerateDocument();
    }
  }, [open, templates, selectedTemplate]);

  async function loadTemplates() {
    try {
      const res = await fetch('/api/document-templates');
      if (res.ok) {
        const list = await res.json();
        setTemplates(list);
        // Auto-select the first template that matches defense type
        const match = list.find(
          (t: any) =>
            t.defense_type?.toLowerCase() === defenseRequest?.defense_type?.toLowerCase()
        );
        if (match) {
          setSelectedTemplate(match);
        } else if (list.length > 0) {
          setSelectedTemplate(list[0]);
        }
      }
    } catch (err) {
      console.error('Failed to load templates:', err);
    }
  }

  async function loadSignatures() {
    setLoadingSignatures(true);
    try {
      const res = await fetch('/api/signatures');
      if (res.ok) {
        const data = await res.json();
        setSignatures(data);
        const active = data.find((s: any) => s.is_active);
        if (active) setActiveSignature(active);
      }
    } catch (err) {
      console.error('Failed to load signatures:', err);
    } finally {
      setLoadingSignatures(false);
    }
  }

  async function handleGenerateDocument() {
    if (!selectedTemplate) {
      toast.error('No template selected');
      return;
    }

    if (!defenseRequest?.id) {
      toast.error('Invalid defense request');
      return;
    }

    setIsGenerating(true);
    try {
      const res = await fetch('/api/generate-document', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/pdf',
          'X-CSRF-TOKEN': csrf()
        },
        body: JSON.stringify({
          template_id: selectedTemplate.id,
          defense_request_id: defenseRequest.id,
          fields: {},
          role: 'coordinator' // Specify role to fill coordinator fields only
        })
      });

      if (!res.ok) {
        throw new Error(`Failed to generate: ${res.status}`);
      }

      // Get the PDF as a blob
      const blob = await res.blob();
      
      // Create a URL for the blob to use in iframe
      const url = window.URL.createObjectURL(blob);
      setGeneratedPdfUrl(url);
      
      toast.success('Endorsement form generated successfully! Review and click "Approve & Sign" to submit.');
    } catch (err) {
      console.error('Generate error:', err);
      toast.error('Failed to generate endorsement form');
    } finally {
      setIsGenerating(false);
    }
  }

  async function handleSaveDrawnSignature() {
    if (!sigPad.current) return;
    
    const canvas = sigPad.current.getCanvas();
    const dataUrl = canvas.toDataURL('image/png');
    
    setIsSavingSignature(true);
    try {
      const res = await fetch('/api/signatures', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-TOKEN': csrf()
        },
        body: JSON.stringify({
          image_base64: dataUrl,
          label: 'Drawn Signature',
          natural_width: canvas.width,
          natural_height: canvas.height
        })
      });

      if (res.ok) {
        await loadSignatures();
        toast.success('Signature saved');
        setShowDrawSignature(false);
      } else {
        toast.error('Failed to save signature');
      }
    } catch (err) {
      console.error('Save signature error:', err);
      toast.error('Failed to save signature');
    } finally {
      setIsSavingSignature(false);
    }
  }

  async function handleActivateSignature(sigId: number) {
    try {
      const res = await fetch(`/api/signatures/${sigId}/activate`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-TOKEN': csrf()
        }
      });

      if (res.ok) {
        await loadSignatures();
        toast.success('Signature activated');
      } else {
        toast.error('Failed to activate signature');
      }
    } catch (err) {
      console.error('Activate signature error:', err);
      toast.error('Failed to activate signature');
    }
  }

  async function handleUploadFile(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!file.type.includes('pdf')) {
      toast.error('Please upload a PDF file');
      return;
    }

    setUploadedFile(file);
    toast.success('File selected. Click "Use This File" to continue.');
  }

  function handleDragOver(e: React.DragEvent) {
    e.preventDefault();
    setIsDragging(true);
  }

  function handleDragLeave(e: React.DragEvent) {
    e.preventDefault();
    setIsDragging(false);
  }

  function handleDrop(e: React.DragEvent) {
    e.preventDefault();
    setIsDragging(false);

    const file = e.dataTransfer.files?.[0];
    if (!file) return;

    if (!file.type.includes('pdf')) {
      toast.error('Please upload a PDF file');
      return;
    }

    setUploadedFile(file);
    toast.success('File selected. Click "Use This File" to continue.');
  }

  async function handleUseUploadedFile() {
    if (!uploadedFile || !defenseRequest?.id) return;

    setIsUploading(true);
    try {
      // Create a blob URL for preview
      const blob = new Blob([uploadedFile], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      setGeneratedPdfUrl(url);
      toast.success('Endorsement form uploaded successfully! Review and click "Approve & Sign" to submit.');
      setCurrentTab('preview');
    } catch (err) {
      console.error('Upload error:', err);
      toast.error('Failed to upload endorsement form');
    } finally {
      setIsUploading(false);
    }
  }

  async function handleFinalApprove() {
    if (!generatedPdfUrl) {
      toast.error('Please generate or upload an endorsement form first');
      return;
    }

    if (!activeSignature) {
      toast.error('Please set an active signature first');
      return;
    }

    setIsApproving(true);
    try {
      console.log('üöÄ Starting coordinator approval process...');
      
      // STEP 1: Ensure endorsement form is uploaded/saved to database
      let endorsementFormSaved = false;
      
      // Check if we have an uploaded file to save
      if (uploadedFile) {
        console.log('üì§ Uploading endorsement form from file...');
        const formData = new FormData();
        formData.append('endorsement_form', uploadedFile);

        const uploadRes = await fetch(
          `/api/defense-requests/${defenseRequest.id}/upload-endorsement`,
          {
            method: 'POST',
            headers: { 'X-CSRF-TOKEN': csrf() },
            body: formData
          }
        );

        if (uploadRes.ok) {
          console.log('‚úÖ Endorsement form uploaded successfully');
          endorsementFormSaved = true;
        } else {
          console.error('‚ùå Failed to upload endorsement form:', uploadRes.status);
          throw new Error('Failed to upload endorsement form');
        }
      } else if (generatedPdfUrl) {
        console.log('üì§ Saving generated endorsement form...');
        // Fetch the blob from the URL
        const blobRes = await fetch(generatedPdfUrl);
        const blob = await blobRes.blob();

        const formData = new FormData();
        formData.append('endorsement_form', blob, 'endorsement-form.pdf');

        const uploadRes = await fetch(
          `/api/defense-requests/${defenseRequest.id}/upload-endorsement`,
          {
            method: 'POST',
            headers: { 'X-CSRF-TOKEN': csrf() },
            body: formData
          }
        );

        if (uploadRes.ok) {
          console.log('‚úÖ Generated endorsement form saved successfully');
          endorsementFormSaved = true;
        } else {
          console.error('‚ùå Failed to save generated endorsement form:', uploadRes.status);
          throw new Error('Failed to save generated endorsement form');
        }
      }

      if (!endorsementFormSaved) {
        toast.error('Failed to save endorsement form');
        return;
      }

      console.log('‚úÖ Endorsement form saved successfully, updating coordinator status...');

      // STEP 2: Update coordinator status to approved
      const payload: any = {
        coordinator_status: 'Approved'
      };

      // Include coordinator_user_id if provided
      if (coordinatorId) {
        payload.coordinator_user_id = coordinatorId;
      }

      console.log('üì§ Updating coordinator status with payload:', payload);
      const statusRes = await fetch(
        `/coordinator/defense-requirements/${defenseRequest.id}/coordinator-status`,
        {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': csrf()
          },
          body: JSON.stringify(payload)
        }
      );

      if (statusRes.ok) {
        console.log('‚úÖ Coordinator status updated successfully');
        toast.success('Defense request approved successfully!');
        onOpenChange(false);
        if (onApproveComplete) {
          onApproveComplete();
        }
      } else {
        console.error('‚ùå Failed to update coordinator status:', statusRes.status);
        const errorText = await statusRes.text();
        console.error('Error response:', errorText);
        toast.error('Failed to update coordinator status');
      }
    } catch (err) {
      console.error('‚ùå Approval error:', err);
      toast.error('Failed to approve defense request');
    } finally {
      setIsApproving(false);
    }
  }

  function drawGuideLine() {
    if (sigPad.current) {
      const canvas = sigPad.current.getCanvas();
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.save();
        ctx.strokeStyle = '#ddd';
        ctx.lineWidth = 1;
        ctx.beginPath();
        const y = canvas.height * 0.75;
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
        ctx.restore();
      }
    }
  }

  return (
    <>
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-5xl h-[90vh] flex flex-col p-0">
          <DialogHeader className="px-6 pt-6 pb-4 border-b">
            <DialogTitle className="text-xl font-semibold">
              Coordinator Approval
            </DialogTitle>
            <DialogDescription>
              Review the endorsement form, ensure your signature is active, and approve.
            </DialogDescription>
          </DialogHeader>

          <Tabs value={currentTab} onValueChange={(v) => setCurrentTab(v as ApprovalTab)} className="flex-1 flex flex-col">
            <div className="px-6 pt-2">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="preview" className="flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Preview
                </TabsTrigger>
                <TabsTrigger value="signature" className="flex items-center gap-2">
                  <SignatureIcon className="h-4 w-4" />
                  Signature
                </TabsTrigger>
                <TabsTrigger value="upload" className="flex items-center gap-2">
                  <Upload className="h-4 w-4" />
                  Upload
                </TabsTrigger>
              </TabsList>
            </div>

            {/* PREVIEW TAB */}
            <TabsContent value="preview" className="flex-1 px-6 pb-6 mt-4">
              <div className="h-full flex flex-col gap-4">
                <div className="flex items-center justify-between">
                  <div className="text-sm text-muted-foreground">
                    {generatedPdfUrl ? 'Endorsement form is ready' : 'Generating endorsement form...'}
                  </div>
                  {generatedPdfUrl && (
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={handleGenerateDocument}
                      disabled={isGenerating}
                    >
                      {isGenerating ? <Loader2 className="h-4 w-4 animate-spin" /> : 'Regenerate'}
                    </Button>
                  )}
                </div>
                
                {isGenerating ? (
                  <div className="flex-1 flex items-center justify-center border rounded-lg bg-muted/20">
                    <div className="text-center space-y-3">
                      <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
                      <p className="text-sm text-muted-foreground">Generating document...</p>
                    </div>
                  </div>
                ) : generatedPdfUrl ? (
                  <div className="flex-1 border rounded-lg overflow-hidden">
                    <iframe
                      src={generatedPdfUrl}
                      className="w-full h-full"
                      title="Endorsement Form Preview"
                    />
                  </div>
                ) : (
                  <div className="flex-1 flex items-center justify-center border rounded-lg bg-muted/20">
                    <p className="text-sm text-muted-foreground">No document available</p>
                  </div>
                )}
              </div>
            </TabsContent>

            {/* SIGNATURE TAB */}
            <TabsContent value="signature" className="flex-1 px-6 pb-6 mt-4 overflow-auto">
              <div className="space-y-4">
                {loadingSignatures ? (
                  <div className="flex items-center justify-center py-12">
                    <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
                  </div>
                ) : (
                  <>
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-semibold">Your Signatures</h3>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setShowDrawSignature(true)}
                      >
                        <SignatureIcon className="h-4 w-4 mr-2" />
                        Draw New Signature
                      </Button>
                    </div>

                    {signatures.length === 0 ? (
                      <div className="text-center py-12 border rounded-lg bg-muted/20">
                        <SignatureIcon className="h-12 w-12 mx-auto text-muted-foreground mb-3" />
                        <p className="text-sm text-muted-foreground">No signatures yet</p>
                        <p className="text-xs text-muted-foreground mt-1">Click "Draw New Signature" to create one</p>
                      </div>
                    ) : (
                      <div className="grid grid-cols-2 gap-4">
                        {signatures.map((sig) => (
                          <div
                            key={sig.id}
                            className={cn(
                              "border rounded-lg p-4 relative cursor-pointer transition-all hover:border-primary",
                              sig.is_active && "border-primary ring-2 ring-primary/20"
                            )}
                            onClick={() => handleActivateSignature(sig.id)}
                          >
                            {sig.is_active && (
                              <Badge className="absolute top-2 right-2 bg-primary">
                                <Check className="h-3 w-3 mr-1" />
                                Active
                              </Badge>
                            )}
                            <div className="flex items-center justify-center h-24 bg-white dark:bg-zinc-900 rounded border">
                              <img
                                src={sig.image_url}
                                alt={sig.label}
                                className="max-h-full max-w-full object-contain"
                              />
                            </div>
                            <p className="text-xs text-center mt-2 text-muted-foreground">
                              {sig.label}
                            </p>
                          </div>
                        ))}
                      </div>
                    )}

                    {activeSignature && (
                      <div className="mt-4 p-4 border rounded-lg bg-primary/5">
                        <div className="flex items-center gap-2 text-sm">
                          <Check className="h-4 w-4 text-primary" />
                          <span className="font-medium">Active signature will be used for approval</span>
                        </div>
                      </div>
                    )}
                  </>
                )}
              </div>
            </TabsContent>

            {/* UPLOAD TAB */}
            <TabsContent value="upload" className="flex-1 px-6 pb-6 mt-4">
              <div className="h-full flex flex-col gap-4">
                <div className="text-sm text-muted-foreground">
                  Upload a pre-signed endorsement form (PDF only)
                </div>

                <div
                  className={cn(
                    "flex-1 border-2 border-dashed rounded-lg p-8 flex flex-col items-center justify-center transition-colors",
                    isDragging ? "border-primary bg-primary/5" : "border-muted-foreground/25",
                    uploadedFile && "border-primary bg-primary/5"
                  )}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                >
                  {uploadedFile ? (
                    <div className="text-center space-y-4">
                      <div className="flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mx-auto">
                        <FileText className="h-8 w-8 text-primary" />
                      </div>
                      <div>
                        <p className="font-medium">{uploadedFile.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                      <div className="flex gap-2 justify-center">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setUploadedFile(null)}
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Remove
                        </Button>
                        <Button
                          size="sm"
                          onClick={handleUseUploadedFile}
                          disabled={isUploading}
                        >
                          {isUploading ? (
                            <Loader2 className="h-4 w-4 animate-spin mr-2" />
                          ) : (
                            <Check className="h-4 w-4 mr-2" />
                          )}
                          Use This File
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center space-y-4">
                      <div className="flex items-center justify-center w-16 h-16 rounded-full bg-muted mx-auto">
                        <Upload className="h-8 w-8 text-muted-foreground" />
                      </div>
                      <div>
                        <p className="font-medium mb-1">Drop your PDF file here</p>
                        <p className="text-sm text-muted-foreground">or click to browse</p>
                      </div>
                      <input
                        ref={uploadInputRef}
                        type="file"
                        accept="application/pdf"
                        onChange={handleUploadFile}
                        className="hidden"
                      />
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => uploadInputRef.current?.click()}
                      >
                        Browse Files
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </TabsContent>
          </Tabs>

          {/* Footer Actions */}
          <div className="px-6 py-4 border-t flex items-center justify-between gap-4">
            <div className="text-xs text-muted-foreground">
              {activeSignature ? (
                <span className="flex items-center gap-1.5 text-green-600 dark:text-green-400">
                  <Check className="h-3.5 w-3.5" />
                  Signature ready
                </span>
              ) : (
                <span className="text-amber-600 dark:text-amber-400">
                  Please set an active signature
                </span>
              )}
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button
                onClick={handleFinalApprove}
                disabled={!generatedPdfUrl || !activeSignature || isApproving}
              >
                {isApproving ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    Approving...
                  </>
                ) : (
                  <>
                    <SignatureIcon className="h-4 w-4 mr-2" />
                    Approve & Sign
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Draw Signature Dialog */}
      <Dialog open={showDrawSignature} onOpenChange={setShowDrawSignature}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Draw Your Signature</DialogTitle>
            <DialogDescription>
              Draw your signature below using your mouse or touchscreen.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div className="border rounded-lg overflow-hidden bg-white">
              <SignatureCanvas
                ref={sigPad}
                canvasProps={{
                  className: 'w-full h-48',
                  onMouseEnter: drawGuideLine
                }}
                backgroundColor="white"
              />
            </div>

            <div className="flex justify-between">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  sigPad.current?.clear();
                  drawGuideLine();
                }}
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Clear
              </Button>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  onClick={() => setShowDrawSignature(false)}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleSaveDrawnSignature}
                  disabled={isSavingSignature}
                >
                  {isSavingSignature ? (
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  ) : (
                    <Check className="h-4 w-4 mr-2" />
                  )}
                  Save Signature
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
